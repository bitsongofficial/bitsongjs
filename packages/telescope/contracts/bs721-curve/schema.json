{
  "contract_name": "bs721-curve",
  "contract_version": "0.1.0-rc1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Structure required by the launchparty-curve contract during its instantiation.",
    "type": "object",
    "required": [
      "bs721_admin",
      "bs721_code_id",
      "name",
      "payment_address",
      "payment_denom",
      "protocol_fee_bps",
      "ratio",
      "referral_fee_bps",
      "seller_fee_bps",
      "start_time",
      "symbol",
      "uri"
    ],
    "properties": {
      "bs721_admin": {
        "type": "string"
      },
      "bs721_code_id": {
        "description": "Code id used to instantiate a bs721 metadata onchain token contract.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "max_edition": {
        "description": "Max edition of the collection launchparty.",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint32",
        "minimum": 0.0
      },
      "max_per_address": {
        "description": "Maximum amount of tokens an address can mint.",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint32",
        "minimum": 0.0
      },
      "name": {
        "description": "BS721 token name.",
        "type": "string"
      },
      "payment_address": {
        "description": "Payment address for the royalties.",
        "type": "string"
      },
      "payment_denom": {
        "description": "Denom used to pay for the NFTs",
        "type": "string"
      },
      "protocol_fee_bps": {
        "description": "Basis per point of the `price` sent to the community pool during mint or burn.",
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      },
      "ratio": {
        "description": "Ratio, is the cooeficient of the curve",
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "referral_fee_bps": {
        "description": "Basis per point of the `price` sent to the referred address during mint or burn.",
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      },
      "seller_fee_bps": {
        "description": "Basis per point of the `price` sent to the royalties address during mint or burn.",
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      },
      "start_time": {
        "description": "Start time of the launchparty.",
        "allOf": [
          {
            "$ref": "#/definitions/Timestamp"
          }
        ]
      },
      "symbol": {
        "description": "BS721 token symbol.",
        "type": "string"
      },
      "uri": {
        "description": "BS721 Uri",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Possible state-changing messages that the launchparty-curve contract can handle.",
    "oneOf": [
      {
        "description": "Allows to mint a bs721 token and, optionally, to refer an address.",
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "description": "Amount of token to mint. The maximum number an address can mint can be limited by the field `maximum_per_address` defined in the `Config`.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "referral": {
                "description": "Referral address used for minting.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "burn"
        ],
        "properties": {
          "burn": {
            "type": "object",
            "required": [
              "min_out_amount",
              "token_ids"
            ],
            "properties": {
              "min_out_amount": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              },
              "referral": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "token_ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Possible query messages that the launchparty-curve contract can handle.",
    "oneOf": [
      {
        "description": "Retrieves contract's configuration",
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the maximum amount of token an address can mint.",
        "type": "object",
        "required": [
          "max_per_address"
        ],
        "properties": {
          "max_per_address": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "buy_price"
        ],
        "properties": {
          "buy_price": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "sell_price"
        ],
        "properties": {
          "sell_price": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "buy_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PriceResponse",
      "type": "object",
      "required": [
        "base_price",
        "protocol_fee",
        "referral",
        "royalties",
        "total_price"
      ],
      "properties": {
        "base_price": {
          "$ref": "#/definitions/Uint128"
        },
        "protocol_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "referral": {
          "$ref": "#/definitions/Uint128"
        },
        "royalties": {
          "$ref": "#/definitions/Uint128"
        },
        "total_price": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "Smart contract configuration structure.",
      "type": "object",
      "required": [
        "creator",
        "name",
        "next_token_id",
        "payment_address",
        "payment_denom",
        "protocol_fee_bps",
        "ratio",
        "referral_fee_bps",
        "seller_fee_bps",
        "start_time",
        "symbol",
        "uri"
      ],
      "properties": {
        "bs721_address": {
          "description": "Address of the bs721 metadata-onchain token contract.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "creator": {
          "description": "Creator of the collection. If not provided it will be the sender. The minter is the only one who can create new NFTs.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "max_edition": {
          "description": "Max edition of the collection launchparty.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "max_per_address": {
          "description": "Maximum amount of token an address can mint.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "name": {
          "description": "Name of the NFT contract",
          "type": "string"
        },
        "next_token_id": {
          "description": "ID of the next NFT that will be minted. The first NFT will be minted with ID == 1.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "payment_address": {
          "description": "Address of the bs721 royalties contract.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "payment_denom": {
          "description": "Denom used to pay for the NFTs",
          "type": "string"
        },
        "protocol_fee_bps": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "ratio": {
          "description": "Ratio, is the cooeficient of the curve",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "referral_fee_bps": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "seller_fee_bps": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "start_time": {
          "description": "Start time of the launchparty.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "symbol": {
          "description": "Symbol of the NFT contract",
          "type": "string"
        },
        "uri": {
          "description": "URI of the NFT contract",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "max_per_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MaxPerAddressResponse",
      "type": "object",
      "properties": {
        "remaining": {
          "description": "Returns the maximum amount of token an address can mint.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "sell_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PriceResponse",
      "type": "object",
      "required": [
        "base_price",
        "protocol_fee",
        "referral",
        "royalties",
        "total_price"
      ],
      "properties": {
        "base_price": {
          "$ref": "#/definitions/Uint128"
        },
        "protocol_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "referral": {
          "$ref": "#/definitions/Uint128"
        },
        "royalties": {
          "$ref": "#/definitions/Uint128"
        },
        "total_price": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}

{
  "contract_name": "bs721-factory",
  "contract_version": "0.1.0-rc1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "bs721_code_id",
      "bs721_curve_code_id",
      "bs721_launchparty_code_id",
      "bs721_royalties_code_id",
      "create_nft_sale_fee",
      "owner",
      "protocol_fee_bps"
    ],
    "properties": {
      "bs721_code_id": {
        "description": "Code id used to instantiate a bs721 metadata onchain token contract.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "bs721_curve_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "bs721_launchparty_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "bs721_royalties_code_id": {
        "description": "Code id used to instantiate bs721 royalties contract. The address of this contract will be used as the payment address for the NFT mint.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "create_nft_sale_fee": {
        "$ref": "#/definitions/Coin"
      },
      "owner": {
        "description": "Address allowed to update contract parameters",
        "type": "string"
      },
      "protocol_fee_bps": {
        "description": "Protocol fee as basis points",
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "bs721_code_id": {
                "description": "Code id used to instantiate a bs721 metadata onchain token contract.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "bs721_curve_code_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "bs721_launchparty_code_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "bs721_royalties_code_id": {
                "description": "Code id used to instantiate bs721 royalties contract. The address of this contract will be used as the payment address for the NFT mint.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "create_nft_sale_fee": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Coin"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "owner": {
                "description": "Address allowed to update contract parameters",
                "type": [
                  "string",
                  "null"
                ]
              },
              "protocol_fee_bps": {
                "description": "Protocol fee as basis points",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_launchaparty"
        ],
        "properties": {
          "create_launchaparty": {
            "$ref": "#/definitions/MsgCreateLaunchparty"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_curve"
        ],
        "properties": {
          "create_curve": {
            "$ref": "#/definitions/MsgCreateCurve"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_royalties_group"
        ],
        "properties": {
          "create_royalties_group": {
            "type": "object",
            "required": [
              "contributors",
              "denom"
            ],
            "properties": {
              "contributors": {
                "description": "NFT collection contibutors.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ContributorMsg"
                }
              },
              "denom": {
                "description": "Native denom distributed to contributors.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "ContributorMsg": {
        "description": "Represents a contributor to the collection.",
        "type": "object",
        "required": [
          "address",
          "role",
          "shares"
        ],
        "properties": {
          "address": {
            "description": "Contributor's address.",
            "type": "string"
          },
          "role": {
            "description": "Contributor's role",
            "type": "string"
          },
          "shares": {
            "description": "Amount of share associated to the contributor.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "MsgCreateCurve": {
        "type": "object",
        "required": [
          "name",
          "payment_address",
          "payment_denom",
          "ratio",
          "referral_fee_bps",
          "seller_fee_bps",
          "start_time",
          "symbol",
          "uri"
        ],
        "properties": {
          "max_edition": {
            "description": "Max edition of the collection launchparty.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          },
          "max_per_address": {
            "description": "Maximum amount of tokens an address can mint.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          },
          "name": {
            "description": "BS721 token name.",
            "type": "string"
          },
          "payment_address": {
            "type": "string"
          },
          "payment_denom": {
            "description": "Denom used to pay for the NFTs",
            "type": "string"
          },
          "ratio": {
            "description": "Ratio, is the cooeficient of the curve",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "referral_fee_bps": {
            "description": "Basis per point of the `price` sent to the referred address during mint. This payment is sent one-off.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "seller_fee_bps": {
            "description": "Basis per point of the `price` sent to the referred address during mint. This payment is sent one-off.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "start_time": {
            "description": "Start time of the launchparty.",
            "allOf": [
              {
                "$ref": "#/definitions/Timestamp"
              }
            ]
          },
          "symbol": {
            "description": "BS721 token symbol.",
            "type": "string"
          },
          "uri": {
            "description": "BS721 Uri",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MsgCreateLaunchparty": {
        "type": "object",
        "required": [
          "contributors",
          "name",
          "party_type",
          "payment_address",
          "price",
          "referral_fee_bps",
          "seller_fee_bps",
          "start_time",
          "symbol",
          "uri"
        ],
        "properties": {
          "contributors": {
            "description": "Contributors to the collection.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ContributorMsg"
            }
          },
          "max_per_address": {
            "description": "Maximum amount of tokens an address can mint.",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          },
          "name": {
            "description": "BS721 token name.",
            "type": "string"
          },
          "party_type": {
            "description": "End condition of the collection launchparty.",
            "allOf": [
              {
                "$ref": "#/definitions/PartyType"
              }
            ]
          },
          "payment_address": {
            "type": "string"
          },
          "price": {
            "description": "Price of single nft minting.",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "referral_fee_bps": {
            "description": "Basis per point of the `price` sent to the referred address during mint. This payment is sent one-off.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "seller_fee_bps": {
            "description": "Basis per point of the `price` sent to the referred address during mint. This payment is sent one-off.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "start_time": {
            "description": "Start time of the launchparty.",
            "allOf": [
              {
                "$ref": "#/definitions/Timestamp"
              }
            ]
          },
          "symbol": {
            "description": "BS721 token symbol.",
            "type": "string"
          },
          "uri": {
            "description": "BS721 Uri",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PartyType": {
        "description": "Possible launchparty type. Each type defines how the party end.",
        "oneOf": [
          {
            "description": "Maximum number of mintable tokens.",
            "type": "object",
            "required": [
              "max_edition"
            ],
            "properties": {
              "max_edition": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Number of seconds after the launchparty start_time.",
            "type": "object",
            "required": [
              "duration"
            ],
            "properties": {
              "duration": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Possible query messages that the launchparty-curve contract can handle.",
    "oneOf": [
      {
        "description": "Retrieves contract's configuration",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "Smart contract configuration structure.",
      "type": "object",
      "required": [
        "bs721_code_id",
        "bs721_curve_code_id",
        "bs721_launchparty_code_id",
        "bs721_royalties_code_id",
        "create_nft_sale_fee",
        "owner",
        "protocol_fee_bps"
      ],
      "properties": {
        "bs721_code_id": {
          "description": "Code id used to instantiate a bs721 metadata onchain token contract.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "bs721_curve_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "bs721_launchparty_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "bs721_royalties_code_id": {
          "description": "Code id used to instantiate bs721 royalties contract. The address of this contract will be used as the payment address for the NFT mint.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "create_nft_sale_fee": {
          "$ref": "#/definitions/Coin"
        },
        "owner": {
          "description": "Address allowed to update contract parameters",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "protocol_fee_bps": {
          "description": "Protocol fee as basis points",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}

{
  "contract_name": "bs721-royalties",
  "contract_version": "0.1.0-rc1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "contributors",
      "denom"
    ],
    "properties": {
      "contributors": {
        "description": "NFT collection contibutors.",
        "type": "array",
        "items": {
          "$ref": "#/definitions/ContributorMsg"
        }
      },
      "denom": {
        "description": "Native denom distributed to contributors.",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "ContributorMsg": {
        "description": "Represents a contributor to the collection.",
        "type": "object",
        "required": [
          "address",
          "role",
          "shares"
        ],
        "properties": {
          "address": {
            "description": "Contributor's address.",
            "type": "string"
          },
          "role": {
            "description": "Contributor's role",
            "type": "string"
          },
          "shares": {
            "description": "Amount of share associated to the contributor.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Update contributors withdrawable amount by computing each contributors percentage of the total distributable contract balance. This function will consider only coins of the stored denom.",
        "type": "object",
        "required": [
          "distribute"
        ],
        "properties": {
          "distribute": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw accrued royalties. This message can only be sent by a contributor.",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Retrieves the list of contributors.",
        "type": "object",
        "required": [
          "list_contributors"
        ],
        "properties": {
          "list_contributors": {
            "type": "object",
            "properties": {
              "limit": {
                "description": "Number of contributors to receive.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "description": "Address after which contributors are retrieved.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the total amount of royalties that can be withdrawn from the contract.",
        "type": "object",
        "required": [
          "withdrawable_amount"
        ],
        "properties": {
          "withdrawable_amount": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves amount of denom that can be distributed.",
        "type": "object",
        "required": [
          "distributable_amount"
        ],
        "properties": {
          "distributable_amount": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "distributable_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "list_contributors": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContributorListResponse",
      "description": "Retrieved contributors response.",
      "type": "object",
      "required": [
        "contributors"
      ],
      "properties": {
        "contributors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContributorResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ContributorResponse": {
          "description": "Single contributor response info.",
          "type": "object",
          "required": [
            "address",
            "initial_shares",
            "percentage_shares",
            "role",
            "withdrawable_royalties"
          ],
          "properties": {
            "address": {
              "description": "Address of the contributor.",
              "type": "string"
            },
            "initial_shares": {
              "description": "Shares of the contributor.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "percentage_shares": {
              "description": "Shares of the contributor in terms of percentage of total shares",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "role": {
              "description": "Role of the contributor.",
              "type": "string"
            },
            "withdrawable_royalties": {
              "description": "Amount of royalties that can be withdrawn",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "withdrawable_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}

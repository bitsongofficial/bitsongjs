/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin, PartyType, Timestamp, ContributorMsg, Config } from "./Bs721Factory.types";
export interface Bs721FactoryReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<Config>;
}
export declare class Bs721FactoryQueryClient implements Bs721FactoryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<Config>;
}
export interface Bs721FactoryInterface extends Bs721FactoryReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateConfig: ({ bs721CodeId, bs721CurveCodeId, bs721LaunchpartyCodeId, bs721RoyaltiesCodeId, createNftSaleFee, owner, protocolFeeBps }: {
        bs721CodeId?: number;
        bs721CurveCodeId?: number;
        bs721LaunchpartyCodeId?: number;
        bs721RoyaltiesCodeId?: number;
        createNftSaleFee?: Coin;
        owner?: string;
        protocolFeeBps?: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createLaunchaparty: ({ contributors, maxPerAddress, name, partyType, paymentAddress, price, referralFeeBps, sellerFeeBps, startTime, symbol, uri }: {
        contributors: ContributorMsg[];
        maxPerAddress?: number;
        name: string;
        partyType: PartyType;
        paymentAddress: string;
        price: Coin;
        referralFeeBps: number;
        sellerFeeBps: number;
        startTime: Timestamp;
        symbol: string;
        uri: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createCurve: ({ maxEdition, maxPerAddress, name, paymentAddress, paymentDenom, ratio, referralFeeBps, sellerFeeBps, startTime, symbol, uri }: {
        maxEdition?: number;
        maxPerAddress?: number;
        name: string;
        paymentAddress: string;
        paymentDenom: string;
        ratio: number;
        referralFeeBps: number;
        sellerFeeBps: number;
        startTime: Timestamp;
        symbol: string;
        uri: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createRoyaltiesGroup: ({ contributors, denom }: {
        contributors: ContributorMsg[];
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class Bs721FactoryClient extends Bs721FactoryQueryClient implements Bs721FactoryInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateConfig: ({ bs721CodeId, bs721CurveCodeId, bs721LaunchpartyCodeId, bs721RoyaltiesCodeId, createNftSaleFee, owner, protocolFeeBps }: {
        bs721CodeId?: number;
        bs721CurveCodeId?: number;
        bs721LaunchpartyCodeId?: number;
        bs721RoyaltiesCodeId?: number;
        createNftSaleFee?: Coin;
        owner?: string;
        protocolFeeBps?: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createLaunchaparty: ({ contributors, maxPerAddress, name, partyType, paymentAddress, price, referralFeeBps, sellerFeeBps, startTime, symbol, uri }: {
        contributors: ContributorMsg[];
        maxPerAddress?: number;
        name: string;
        partyType: PartyType;
        paymentAddress: string;
        price: Coin;
        referralFeeBps: number;
        sellerFeeBps: number;
        startTime: Timestamp;
        symbol: string;
        uri: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createCurve: ({ maxEdition, maxPerAddress, name, paymentAddress, paymentDenom, ratio, referralFeeBps, sellerFeeBps, startTime, symbol, uri }: {
        maxEdition?: number;
        maxPerAddress?: number;
        name: string;
        paymentAddress: string;
        paymentDenom: string;
        ratio: number;
        referralFeeBps: number;
        sellerFeeBps: number;
        startTime: Timestamp;
        symbol: string;
        uri: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createRoyaltiesGroup: ({ contributors, denom }: {
        contributors: ContributorMsg[];
        denom: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}

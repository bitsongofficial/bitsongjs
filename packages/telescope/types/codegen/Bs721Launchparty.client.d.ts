/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin, Config, MaxPerAddressResponse } from "./Bs721Launchparty.types";
export interface Bs721LaunchpartyReadOnlyInterface {
    contractAddress: string;
    getConfig: () => Promise<Config>;
    maxPerAddress: ({ address }: {
        address: string;
    }) => Promise<MaxPerAddressResponse>;
}
export declare class Bs721LaunchpartyQueryClient implements Bs721LaunchpartyReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getConfig: () => Promise<Config>;
    maxPerAddress: ({ address }: {
        address: string;
    }) => Promise<MaxPerAddressResponse>;
}
export interface Bs721LaunchpartyInterface extends Bs721LaunchpartyReadOnlyInterface {
    contractAddress: string;
    sender: string;
    mint: ({ amount, referral }: {
        amount: number;
        referral?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class Bs721LaunchpartyClient extends Bs721LaunchpartyQueryClient implements Bs721LaunchpartyInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    mint: ({ amount, referral }: {
        amount: number;
        referral?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}

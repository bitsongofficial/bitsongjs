/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, PartyType, Timestamp, Uint64, MsgCreateLaunchparty, ContributorMsg, MsgCreateCurve, QueryMsg, Addr, Config } from "./Bs721Factory.types";
export interface Bs721FactoryReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
}
export class Bs721FactoryQueryClient implements Bs721FactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface Bs721FactoryInterface extends Bs721FactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    bs721CodeId,
    bs721CurveCodeId,
    bs721LaunchpartyCodeId,
    bs721RoyaltiesCodeId,
    createNftSaleFee,
    owner,
    protocolFeeBps
  }: {
    bs721CodeId?: number;
    bs721CurveCodeId?: number;
    bs721LaunchpartyCodeId?: number;
    bs721RoyaltiesCodeId?: number;
    createNftSaleFee?: Coin;
    owner?: string;
    protocolFeeBps?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  createLaunchaparty: ({
    contributors,
    maxPerAddress,
    name,
    partyType,
    paymentAddress,
    price,
    referralFeeBps,
    sellerFeeBps,
    startTime,
    symbol,
    uri
  }: {
    contributors: ContributorMsg[];
    maxPerAddress?: number;
    name: string;
    partyType: PartyType;
    paymentAddress: string;
    price: Coin;
    referralFeeBps: number;
    sellerFeeBps: number;
    startTime: Timestamp;
    symbol: string;
    uri: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  createCurve: ({
    maxEdition,
    maxPerAddress,
    name,
    paymentAddress,
    paymentDenom,
    ratio,
    referralFeeBps,
    sellerFeeBps,
    startTime,
    symbol,
    uri
  }: {
    maxEdition?: number;
    maxPerAddress?: number;
    name: string;
    paymentAddress: string;
    paymentDenom: string;
    ratio: number;
    referralFeeBps: number;
    sellerFeeBps: number;
    startTime: Timestamp;
    symbol: string;
    uri: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  createRoyaltiesGroup: ({
    contributors,
    denom
  }: {
    contributors: ContributorMsg[];
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class Bs721FactoryClient extends Bs721FactoryQueryClient implements Bs721FactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.createLaunchaparty = this.createLaunchaparty.bind(this);
    this.createCurve = this.createCurve.bind(this);
    this.createRoyaltiesGroup = this.createRoyaltiesGroup.bind(this);
  }

  updateConfig = async ({
    bs721CodeId,
    bs721CurveCodeId,
    bs721LaunchpartyCodeId,
    bs721RoyaltiesCodeId,
    createNftSaleFee,
    owner,
    protocolFeeBps
  }: {
    bs721CodeId?: number;
    bs721CurveCodeId?: number;
    bs721LaunchpartyCodeId?: number;
    bs721RoyaltiesCodeId?: number;
    createNftSaleFee?: Coin;
    owner?: string;
    protocolFeeBps?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        bs721_code_id: bs721CodeId,
        bs721_curve_code_id: bs721CurveCodeId,
        bs721_launchparty_code_id: bs721LaunchpartyCodeId,
        bs721_royalties_code_id: bs721RoyaltiesCodeId,
        create_nft_sale_fee: createNftSaleFee,
        owner,
        protocol_fee_bps: protocolFeeBps
      }
    }, fee, memo, funds);
  };
  createLaunchaparty = async ({
    contributors,
    maxPerAddress,
    name,
    partyType,
    paymentAddress,
    price,
    referralFeeBps,
    sellerFeeBps,
    startTime,
    symbol,
    uri
  }: {
    contributors: ContributorMsg[];
    maxPerAddress?: number;
    name: string;
    partyType: PartyType;
    paymentAddress: string;
    price: Coin;
    referralFeeBps: number;
    sellerFeeBps: number;
    startTime: Timestamp;
    symbol: string;
    uri: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_launchaparty: {
        contributors,
        max_per_address: maxPerAddress,
        name,
        party_type: partyType,
        payment_address: paymentAddress,
        price,
        referral_fee_bps: referralFeeBps,
        seller_fee_bps: sellerFeeBps,
        start_time: startTime,
        symbol,
        uri
      }
    }, fee, memo, funds);
  };
  createCurve = async ({
    maxEdition,
    maxPerAddress,
    name,
    paymentAddress,
    paymentDenom,
    ratio,
    referralFeeBps,
    sellerFeeBps,
    startTime,
    symbol,
    uri
  }: {
    maxEdition?: number;
    maxPerAddress?: number;
    name: string;
    paymentAddress: string;
    paymentDenom: string;
    ratio: number;
    referralFeeBps: number;
    sellerFeeBps: number;
    startTime: Timestamp;
    symbol: string;
    uri: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_curve: {
        max_edition: maxEdition,
        max_per_address: maxPerAddress,
        name,
        payment_address: paymentAddress,
        payment_denom: paymentDenom,
        ratio,
        referral_fee_bps: referralFeeBps,
        seller_fee_bps: sellerFeeBps,
        start_time: startTime,
        symbol,
        uri
      }
    }, fee, memo, funds);
  };
  createRoyaltiesGroup = async ({
    contributors,
    denom
  }: {
    contributors: ContributorMsg[];
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_royalties_group: {
        contributors,
        denom
      }
    }, fee, memo, funds);
  };
}
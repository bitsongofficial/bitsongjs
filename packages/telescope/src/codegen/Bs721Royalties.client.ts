/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ContributorMsg, ExecuteMsg, QueryMsg, Uint128, Decimal, ContributorListResponse, ContributorResponse } from "./Bs721Royalties.types";
export interface Bs721RoyaltiesReadOnlyInterface {
  contractAddress: string;
  listContributors: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ContributorListResponse>;
  withdrawableAmount: () => Promise<Uint128>;
  distributableAmount: () => Promise<Uint128>;
}
export class Bs721RoyaltiesQueryClient implements Bs721RoyaltiesReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.listContributors = this.listContributors.bind(this);
    this.withdrawableAmount = this.withdrawableAmount.bind(this);
    this.distributableAmount = this.distributableAmount.bind(this);
  }

  listContributors = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ContributorListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_contributors: {
        limit,
        start_after: startAfter
      }
    });
  };
  withdrawableAmount = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      withdrawable_amount: {}
    });
  };
  distributableAmount = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      distributable_amount: {}
    });
  };
}
export interface Bs721RoyaltiesInterface extends Bs721RoyaltiesReadOnlyInterface {
  contractAddress: string;
  sender: string;
  distribute: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class Bs721RoyaltiesClient extends Bs721RoyaltiesQueryClient implements Bs721RoyaltiesInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.distribute = this.distribute.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }

  distribute = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute: {}
    }, fee, memo, funds);
  };
  withdraw = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, fee, memo, funds);
  };
}
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { MediaType, Timestamp, Uint64, InstantiateMsg, ContributorMsg, Metadata, Trait, ExecuteMsg, QueryMsg, Uint128, PriceResponse, Addr, ConfigResponse, MaxPerAddressResponse } from "./Bs721Curve.types";
export interface Bs721CurveReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<ConfigResponse>;
  maxPerAddress: ({
    address
  }: {
    address: string;
  }) => Promise<MaxPerAddressResponse>;
  buyPrice: ({
    amount
  }: {
    amount: number;
  }) => Promise<PriceResponse>;
  sellPrice: ({
    amount
  }: {
    amount: number;
  }) => Promise<PriceResponse>;
}
export class Bs721CurveQueryClient implements Bs721CurveReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.maxPerAddress = this.maxPerAddress.bind(this);
    this.buyPrice = this.buyPrice.bind(this);
    this.sellPrice = this.sellPrice.bind(this);
  }

  getConfig = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  maxPerAddress = async ({
    address
  }: {
    address: string;
  }): Promise<MaxPerAddressResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      max_per_address: {
        address
      }
    });
  };
  buyPrice = async ({
    amount
  }: {
    amount: number;
  }): Promise<PriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      buy_price: {
        amount
      }
    });
  };
  sellPrice = async ({
    amount
  }: {
    amount: number;
  }): Promise<PriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      sell_price: {
        amount
      }
    });
  };
}
export interface Bs721CurveInterface extends Bs721CurveReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mint: ({
    amount,
    referral
  }: {
    amount: number;
    referral?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  burn: ({
    referral,
    tokenIds
  }: {
    referral?: string;
    tokenIds: number[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class Bs721CurveClient extends Bs721CurveQueryClient implements Bs721CurveInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
  }

  mint = async ({
    amount,
    referral
  }: {
    amount: number;
    referral?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        amount,
        referral
      }
    }, fee, memo, funds);
  };
  burn = async ({
    referral,
    tokenIds
  }: {
    referral?: string;
    tokenIds: number[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        referral,
        token_ids: tokenIds
      }
    }, fee, memo, funds);
  };
}